lua_package_path "/root/lua-resty-upstream-healthcheck/lib/?.lua;;";
upstream wordpress {
      zone backend 64k;
      server 10.0.0.11 slow_start=5s max_fails=2 fail_timeout=5s weight=2;
      server 10.0.0.7 slow_start=5s max_fails=2 fail_timeout=5s weight=3;
      server 10.0.0.3 slow_start=5s max_fails=2 fail_timeout=5s weight=3;
 }
 
   # This server accepts all traffic to port 80 and passes it to the upstream.
   # Notice that the upstream name and the proxy_pass need to match.
   #test change
lua_shared_dict healthcheck 1m;
lua_socket_log_errors off;
 
init_worker_by_lua_block {
      local hc = require "resty.upstream.healthcheck"
      init_worker_by_lua_block {
  local hc = require "resty.upstream.healthcheck"

  local ok, err = hc.spawn_checker{
      shm = "healthcheck",  -- defined by "lua_shared_dict"
      upstream = "backend", -- defined by "upstream"
      type = "http",

      http_req = "GET / HTTP/1.0\r\nHost: backend\r\n\r\n",
              -- raw HTTP request for checking

      interval = 1000,  -- run the check cycle every 3 sec
      timeout = 1000,   -- 1 sec is the timeout for network operations
      fall = 2,  -- # of successive failures before turning a peer down
      rise = 2,  -- # of successive successes before turning a peer up
      valid_statuses = {200},  -- a list valid HTTP status code
      concurrency = 10,  -- concurrency level for test requests
  }
  if not ok then
      ngx.log(ngx.ERR, "failed to spawn health checker: ", err)
      return
  end
}
 server {
      listen 80;
      location = /stub_status {
        stub_status;
      }
      
      location /nginx_status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        allow all;
      }
      location /metrics {
        stub_status on;
      }
 
      location / {
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_pass http://wordpress;
        proxy_connect_timeout 1000ms;
        proxy_next_upstream error timeout http_500 invalid_header;
        health_check interval=1 fails=1 passes=2;
        proxy_next_upstream_tries  2;
     }
}
server {
    listen 8080;
    location /api {
        api write=on;
    }
}
